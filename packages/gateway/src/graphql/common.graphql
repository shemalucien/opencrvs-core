# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS
# graphic logo are (registered/a) trademark(s) of Plan International.
# automatically map from FHIR

scalar Date
scalar Map

input HumanNameInput {
  use: String # bn | en - the language the name text is written in
  firstNames: String
  familyName: String
}

type HumanName { # -> HumanName
  use: String # bn | en - the language the name text is written in
  firstNames: String # -> .given
  familyName: String # -> .family
}

# Although the recommended way is use ALL_CAPS but keeping it lowercase
# makes it a lot more easier to use in client
enum Event {
  birth
  death
}

enum Relationship {
  GUARDIAN
  NON_LEGAL_GUARDIAN
  MATERNAL_GRANDMOTHER
  MATERNAL_GRANDFATHER
  PATERNAL_GRANDMOTHER
  PATERNAL_GRANDFATHER
}

enum IdentityIDType {
  PASSPORT
  NATIONAL_ID
  MOSIP_UINTOKEN
  DECEASED_PATIENT_ENTRY
  BIRTH_PATIENT_ENTRY
  DRIVING_LICENSE
  BIRTH_REGISTRATION_NUMBER
  DEATH_REGISTRATION_NUMBER
  REFUGEE_NUMBER
  ALIEN_NUMBER
  OTHER
  NO_ID
  SOCIAL_SECURITY_NO
}

enum EducationType {
  NO_SCHOOLING
  PRIMARY_ISCED_1
  LOWER_SECONDARY_ISCED_2
  UPPER_SECONDARY_ISCED_3
  POST_SECONDARY_ISCED_4
  FIRST_STAGE_TERTIARY_ISCED_5
  SECOND_STAGE_TERTIARY_ISCED_6
  NOT_STATED
}

enum MaritalStatusType {
  SINGLE
  MARRIED
  WIDOWED
  DIVORCED
  NOT_STATED
  SEPARATED
}

enum AddressType {
  HEALTH_FACILITY
  ADMIN_STRUCTURE
  CRVS_OFFICE
  PRIVATE_HOME
  DECEASED_USUAL_RESIDENCE
  SECONDARY_ADDRESS
  PRIMARY_ADDRESS
  MILITARY_BASE_OR_CANTONMENT
  IDP_CAMP # -> Disaster Camp
  UNHCR_CAMP # -> UNHCR Camp
  OTHER
}

enum RelationshipType {
  FATHER
  MOTHER
  SPOUSE
  SON
  DAUGHTER
  SON_IN_LAW
  DAUGHTER_IN_LAW
  EXTENDED_FAMILY
  OTHER
  INFORMANT
  GRANDFATHER
  GRANDMOTHER
  GRANDSON
  GRANDDAUGHTER
  BROTHER
  SISTER
  OTHER_FAMILY_MEMBER
  INSTITUTION_HEAD_PLACE_OF_BIRTH
  HOUSE_OWNER
  OPERATOR
  OFFICE_IN_CHARGE
  LEGAL_GUARDIAN
  BOTH_PARENTS
  HEAD_OF_THE_INSTITUTE
  OWNER_OF_THE_HOUSE
  DRIVER_OF_THE_VEHICLE
  OFFICER_IN_CHARGE
}

input IdentityInput {
  id: ID
  type: IdentityIDType
  otherType: String
}

type IdentityType { # -> Identifier
  id: ID # -> .value
  type: IdentityIDType # -> .system
  otherType: String
}

input RelatedPersonInput {
  id: ID
  _fhirID: ID # -> .id
  relationship: String
  otherRelationship: String
  affidavit: [AttachmentInput!]
  individual: PersonInput
  exactDateOfBirthUnknown: Boolean
  ageOfIndividualInYears: Int
}

type RelatedPerson { # -> Related Person
  id: ID
  _fhirID: ID # -> .id
  relationship: String # -> .relationship.coding
  otherRelationship: String # -> .relationship.coding
  affidavit: [Attachment] # -> .extension
  individual: Person # -> .patient.reference
  exactDateOfBirthUnknown: Boolean
  ageOfIndividualInYears: Int
}

input DeceasedInput {
  deceased: Boolean
  deathDate: String
}

type Deceased {
  deceased: Boolean
  deathDate: String
}

input PersonInput {
  _fhirID: ID
  identifier: [IdentityInput]
  name: [HumanNameInput]
  telecom: [ContactPointInput]
  gender: String
  birthDate: String
  age: Float
  maritalStatus: MaritalStatusType # Not in BDRIS2 - keep as optional
  occupation: String
  detailsExist: Boolean
  reasonNotApplying: String
  dateOfMarriage: Date # Not in BDRIS2
  # For order of birth 3 equals 3rd born
  multipleBirth: Int # Not in BDRIS2
  address: [AddressInput]
  photo: [AttachmentInput!]
  deceased: DeceasedInput
  nationality: [String] # In BDRIS2 for father and mother only
  educationalAttainment: EducationType # Not in BDRIS2
  ageOfIndividualInYears: Int
}

type Person { # -> Patient
  id: ID
  _fhirID: ID # -> .id
  identifier: [IdentityType] # -> .identifier
  name: [HumanName] # -> .name
  telecom: [ContactPoint] # -> .telecom
  gender: String # -> .gender
  birthDate: String # -> birthDate
  age: Float # -> .extension(url='http://opencrvs.org/specs/age').valueInteger
  maritalStatus: MaritalStatusType # -> .maritalStatus
  occupation: String
  detailsExist: Boolean
  reasonNotApplying: String
  dateOfMarriage: Date # -> .extension(url='http://opencrvs.org/specs/date-of-marriage').valueDateTime
  # For order of birth 3 equals 3rd born
  multipleBirth: Int # -> .multipleBirthInteger
  address: [Address] # -> .address
  photo: [Attachment] # -> .photo
  deceased: Deceased # -> .deceased
  nationality: [String] # -> .extension https://www.hl7.org/fhir/extension-patient-nationality.html
  educationalAttainment: EducationType # -> .extension(url='http://opencrvs.org/specs/extension/educational-attainment').valueString
  ageOfIndividualInYears: Int
  exactDateOfBirthUnknown: Boolean
}

input ContactPointInput {
  # phone | fax | email | pager | url | sms | other
  system: String
  # The actual contact point details
  value: String
  # home | work | temp | old | mobile - purpose of this contact point
  use: String
}

type ContactPoint { # -> ContactPoint
  # phone | fax | email | pager | url | sms | other
  system: String # -> .system
  # The actual contact point details
  value: String # -> .value
  # home | work | temp | old | mobile - purpose of this contact point
  use: String # -> .use
}

type Identifier {
  system: String
  value: String
}

input AddressInput {
  use: String
  type: AddressType
  text: String # Reserve for geo-code
  line: [String]
  city: String
  district: String
  state: String
  postalCode: String
  country: String
  from: Date # Not in BDRIS2 use Current/Permenant
  to: Date # Not in BDRIS2 use Current/Permenant
}

type Address { # -> Address (mostly the same property name except:)
  use: String
  type: AddressType
  text: String # Reserve for geo-code
  line: [String]
  lineName: [String]
  city: String
  district: String
  districtName: String
  state: String
  stateName: String
  postalCode: String
  country: String
  from: Date # -> .period.start
  to: Date # -> .period.end
}
