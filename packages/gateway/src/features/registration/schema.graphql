# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS
# graphic logo are (registered/a) trademark(s) of Plan International.
enum RegStatus {
  IN_PROGRESS
  ARCHIVED
  DECLARED
  DECLARATION_UPDATED
  WAITING_VALIDATION
  VALIDATED
  REGISTERED
  CERTIFIED
  REJECTED
}

enum RegAction {
  ASSIGNED
  UNASSIGNED
  REINSTATED
  REQUESTED_CORRECTION
  DOWNLOADED
  VIEWED
}

enum BirthRegType {
  BOTH_PARENTS
  SELF
  INFORMANT_ONLY
  MOTHER_ONLY
  FATHER_ONLY
}

enum RegistrationContactType {
  BOTH
  MOTHER
  FATHER
  OTHER
  INFORMANT
}

enum InformantType {
  INFORMANT
  MOTHER
  FATHER
  GRANDFATHER
  GRANDMOTHER
  BROTHER
  SISTER
  OTHER_FAMILY_MEMBER
  LEGAL_GUARDIAN
  SPOUSE
  SON
  DAUGHTER
  SON_IN_LAW
  DAUGHTER_IN_LAW
  GRANDSON
  GRANDDAUGHTER
  OTHER
}

enum BirthType {
  SINGLE
  TWIN
  TRIPLET
  QUADRUPLET
  HIGHER_MULTIPLE_DELIVERY
}

enum AttendantType {
  PHYSICIAN
  NURSE
  NURSE_MIDWIFE
  MIDWIFE
  TRADITIONAL_BIRTH_ATTENDANT
  OTHER_PARAMEDICAL_PERSONNEL
  LAYPERSON
  NONE
  OTHER
}

enum AttachmentType {
  BIRTH_CERTIFICATE
  NATIONAL_ID
  PASSPORT
  NOTIFICATION_OF_BIRTH
  PROOF_OF_LEGAL_GUARDIANSHIP
  PROOF_OF_ASSIGNED_RESPONSIBILITY
  HOSPITAL_CERTIFICATE_OF_DEATH
  ATTESTED_LETTER_OF_DEATH
  BURIAL_RECEIPT
  POLICE_CERTIFICATE_OF_DEATH
  MEDICALLY_CERTIFIED_CAUSE_OF_DEATH
  VERBAL_AUTOPSY_REPORT
  CORONERS_REPORT
  OTHER
}

enum AttachmentSubject {
  MOTHER
  FATHER
  CHILD
  OTHER
  PARENT
  CHILD_AGE
  DECEASED_ID_PROOF
  DECEASED_DEATH_PROOF
  DECEASED_DEATH_CAUSE_PROOF
  INFORMANT_ID_PROOF
  LEGAL_GUARDIAN_PROOF
}

enum RegistrationType {
  BIRTH
  DEATH
}

enum MannerOfDeath {
  NATURAL_CAUSES
  ACCIDENT
  SUICIDE
  HOMICIDE
  MANNER_UNDETERMINED
}

enum PaymentType {
  MANUAL
}

enum PaymentOutcomeType {
  COMPLETED
  ERROR
  PARTIAL
}

enum CauseOfDeathMethodType {
  PHYSICIAN
  LAY_REPORTED
  VERBAL_AUTOPSY
  MEDICALLY_CERTIFIED
}

input PaymentInput {
  paymentId: ID
  type: PaymentType
  total: Float
  amount: Float
  outcome: PaymentOutcomeType
  date: Date
  data: String
}

type Payment { # -> PaymentReconciliation
  paymentId: ID # -> .identifier
  type: PaymentType # -> .detail.type
  total: Float # -> .total
  amount: Float # .detail.amount
  outcome: PaymentOutcomeType # -> .outcome
  date: Date # -> .detail.date
}

input MedicalPractitionerInput { # -> Encounter.participant
  name: String # -> Encounter.participant.individual(Practitioner).name
  qualification: String # -> Encounter.participant.individual(Practitioner).qualification
  lastVisitDate: Date # -> Encounter.participant.preriod.start
}

type MedicalPractitioner { # -> Encounter.participant
  name: String # -> Encounter.participant.individual(Practitioner).name
  qualification: String # -> Encounter.participant.individual(Practitioner).qualification
  lastVisitDate: Date # -> Encounter.participant.preriod.start
}

enum ParentDetailsType {
  MOTHER_AND_FATHER
  MOTHER_ONLY
  FATHER_ONLY
  NONE
}

input CommentInput {
  user: UserInput
  comment: String
  createdAt: Date
}

type Comment { # Annotation
  id: ID!
  user: User # -> .authorString
  comment: String # -> .text
  createdAt: Date # -> .time
}

type StatusReason {
  text: String
}

input RegWorkflowInput {
  type: RegStatus
  user: UserInput
  timestamp: Date
  reason: String
  comments: [CommentInput]
  location: LocationInput
  timeLoggedMS: Int
}

type RegWorkflow { # Task
  id: ID!
  type: RegStatus # -> .businessStatus
  user: User # -> extension(url='http://opencrvs.org/specs/extension/regLastUser').valueReference
  timestamp: Date # -> lastModified
  comments: [Comment] # -> .note
  reason: String # -> .reason.text
  location: Location # -> extension(url='http://opencrvs.org/specs/extension/regLastLocation').valueReference
  office: Location # -> extension(url='http://opencrvs.org/specs/extension/regLastOffice').valueReference
  timeLogged: Int # -> from metrics
}

type InputOutput {
  valueCode: String
  valueId: String
  valueString: String
}

type History {
  user: User
  date: Date
  regStatus: RegStatus
  action: RegAction
  statusReason: StatusReason
  reason: String
  requester: String
  hasShowedVerifiedDocument: Boolean
  otherReason: String
  #This doesn't resolve to the System model properly rather
  #uses the getSystem endpoint in user-mgnt
  system: System # -> identitifier(system='http://opencrvs.org/specs/extension/system_identifier')
  location: Location # -> extension(url='http://opencrvs.org/specs/extension/regLastLocation').valueReference
  office: Location # -> extension(url='http://opencrvs.org/specs/extension/regLastOffice').valueReference
  dhis2Notification: Boolean # -> identitifier(system='http://opencrvs.org/specs/extension/dhis2_event_identifier')
  comments: [Comment]
  input: [InputOutput]
  output: [InputOutput]
  certificates: [Certificate]
  signature: Signature
}

interface EventRegistration {
  id: ID! # long uuid
  registration: Registration
  history: [History]
  createdAt: Date
}

input BirthRegistrationInput {
  _fhirIDMap: Map
  registration: RegistrationInput
  child: PersonInput
  mother: PersonInput
  father: PersonInput
  informant: RelatedPersonInput
  eventLocation: LocationInput
  birthType: BirthType # Not in BDRIS2
  questionnaire: [QuestionnaireQuestionInput]
  weightAtBirth: Float # Not in BDRIS2
  attendantAtBirth: AttendantType # Not in BDRIS2
  otherAttendantAtBirth: String
  birthRegistrationType: BirthRegType
  childrenBornAliveToMother: Int # Not in BDRIS2
  foetalDeathsToMother: Int # Not in BDRIS2
  lastPreviousLiveBirth: Date # Not in BDRIS2
  createdAt: Date
  updatedAt: Date
}

type BirthRegistration implements EventRegistration { # -> Composition
  id: ID! # long uuid
  _fhirIDMap: Map
  registration: Registration
  child: Person # -> .section(code='child-details').entry.reference
  mother: Person # -> .section(code='mother-details').entry.reference
  father: Person # -> .section(code='father-details').entry.reference
  informant: RelatedPerson # -> .section(code='informant-details').entry.reference
  eventLocation: Location
  birthType: BirthType # -> Observation.valueInteger
  questionnaire: [QuestionnaireQuestion]
  weightAtBirth: Float # -> Observation.valueQuantity (code=kg)
  attendantAtBirth: AttendantType # -> Observation.valueString
  otherAttendantAtBirth: String
  birthRegistrationType: BirthRegType # -> Observation.valueString
  childrenBornAliveToMother: Int # -> Observation.valueInteger
  foetalDeathsToMother: Int # -> Observation.valueInteger
  lastPreviousLiveBirth: Date # -> Observation.valueDateTime
  createdAt: Date # -> .date($first)
  updatedAt: Date # -> .date
  history: [History]
}

input DeathRegistrationInput {
  _fhirIDMap: Map
  registration: RegistrationInput
  # Remember to mark person as deceased
  deceased: PersonInput
  informant: RelatedPersonInput # -> Use for informant ->.section(code='informant-details').entry.reference
  mother: PersonInput # -> Use for informant ->.section(code='mother-details').entry.reference
  father: PersonInput # -> Use for informant ->.section(code='father-details').entry.reference
  spouse: PersonInput # -> Use for informant ->.section(code='spouse-details').entry.reference
  eventLocation: LocationInput
  questionnaire: [QuestionnaireQuestionInput]
  mannerOfDeath: MannerOfDeath # -> Observation.valueCodeableConcept
  deathDescription: String
  causeOfDeathMethod: CauseOfDeathMethodType # -> Observation.valueCodeableConcept
  causeOfDeathEstablished: String
  causeOfDeath: String # need to store ICD-10? More types of cause of death
  maleDependentsOfDeceased: Float # -> Observation.valueCodeableConcept
  femaleDependentsOfDeceased: Float # -> Observation.valueCodeableConcept
  medicalPractitioner: MedicalPractitionerInput # -> Encounter.participant
  createdAt: Date
  updatedAt: Date
}

# In BDRIS2 BRN is used to link to birth - Must have BRN to register death. Only deathLocation and current address is captures for death as the rest is the same as birth registration
type DeathRegistration implements EventRegistration { # -> Composition
  id: ID! # long uuid
  _fhirIDMap: Map
  registration: Registration
  # Remember to mark person as deceased
  deceased: Person # -> .section(code='deceased-details').entry.reference
  informant: RelatedPerson # -> Use for informant ->.section(code='informant-details').entry.reference
  mother: Person # -> Use for informant ->.section(code='mother-details').entry.reference
  father: Person # -> Use for informant ->.section(code='father-details').entry.reference
  spouse: Person # -> Use for informant ->.section(code='spouse-details').entry.reference
  eventLocation: Location
  questionnaire: [QuestionnaireQuestion]
  mannerOfDeath: MannerOfDeath # -> Observation.valueCodeableConcept
  deathDescription: String
  causeOfDeathMethod: CauseOfDeathMethodType # -> Observation.valueCodeableConcept
  causeOfDeathEstablished: String
  causeOfDeath: String # -> Observation.valueCodeableConcept
  maleDependentsOfDeceased: Float # -> Observation.valueCodeableConcept
  femaleDependentsOfDeceased: Float # -> Observation.valueCodeableConcept
  medicalPractitioner: MedicalPractitioner # -> Encounter.participant
  createdAt: Date # -> .date($first)
  updatedAt: Date # -> .date
  history: [History]
}

input CorrectionValueInput {
  section: String
  fieldName: String
  oldValue: String
  newValue: String
}

input CorrectionInput {
  requester: ID # -> Practitioner ID
  hasShowedVerifiedDocument: Boolean
  attestedAndCopied: Boolean
  noSupportingDocumentationRequired: Boolean
  payments: [PaymentInput]
  values: [CorrectionValueInput]
  location: LocationInput
  data: String
  reason: String
  otherReason: String
  note: String
}

input RegistrationInput {
  _fhirID: ID
  draftId: String # long uuid for preventing an event from duplicate submission
  # short uuid easy to remember
  trackingId: String
  # ID generated by MOSIP that customer can use to check up on a birth reg ID application
  mosipAid: String
  # BRN (Birth Registration Number) DRN (Death Registration Number) - Format to be decided
  registrationNumber: String
  paperFormID: String
  page: String
  book: String
  informantsSignature: String # -> extension(url='http://opencrvs.org/specs/extension/informants-signature').valueString
  informantType: InformantType # -> Observation.valueString
  otherInformantType: String
  contact: String # -> extension(url='http://opencrvs.org/specs/extension/contact-person').valueString
  contactRelationship: String # -> extension(url='http://opencrvs.org/specs/extension/contact-relationship').valueString
  contactPhoneNumber: String
  status: [RegWorkflowInput]
  type: RegistrationType
  inCompleteFields: String
  attachments: [AttachmentInput!]
  certificates: [CertificateInput]
  location: LocationInput
  correction: CorrectionInput
}

type Registration { # -> Task
  id: ID # -> .id
  _fhirID: ID # -> .id
  draftId: String
  # short uuid easy to remember
  trackingId: String # -> .identifier
  # ID generated by MOSIP that customer can use to check up on a birth reg ID application
  mosipAid: String
  # BRN (Birth Registration Number) DRN (Death Registration Number) - Format to be decided
  registrationNumber: String # -> .identifier
  paperFormID: String # -> .identifier
  page: String # -> .identifier
  book: String # -> .identifier
  informantType: InformantType # -> Observation.valueString
  otherInformantType: String
  assignment: AssignmentData # -> extension(url='http://opencrvs.org/specs/extension/regAssigned')
  contact: String # -> extension(url='http://opencrvs.org/specs/extension/contact-person').valueString
  contactRelationship: String # -> extension(url='http://opencrvs.org/specs/extension/contact-relationship').valueString
  informantsSignature: String # -> extension(url='http://opencrvs.org/specs/extension/informants-signature').valueString
  contactPhoneNumber: String # -> extension(url='http://opencrvs.org/specs/extension/contact-person-phone-number').valueString
  status: [RegWorkflow] # -> Task.*
  type: RegistrationType # -> .code
  inCompleteFields: String # -> .status ('draft' | 'requested') && extension(url='http://opencrvs.org/specs/extension/in-complete-fields').valueString
  attachments: [Attachment] # -> Composition.section(code='scanned-documents').entry.reference
  certificates: [Certificate] # -> Composition.section(code='certificates').entry.reference
  duplicates: [ID]
}

input CertificateInput {
  collector: RelatedPersonInput
  hasShowedVerifiedDocument: Boolean
  payments: [PaymentInput]
  data: String
}

type Certificate { # -> Document Reference
  collector: RelatedPerson # -> .extension
  hasShowedVerifiedDocument: Boolean # -> .extension
  payments: [Payment] # -> .extension
  data: String # -> .content.attachment.data base64
}

input QuestionnaireQuestionInput {
  fieldId: String
  value: String
}

input AttachmentInput {
  _fhirID: ID
  contentType: String
  # base64
  data: String!
  # approved/validated/deleted
  status: String
  originalFileName: String
  systemFileName: String
  type: AttachmentType
  description: String # -> use for other document type -> .description
  subject: AttachmentSubject
  createdAt: Date
}

type QuestionnaireQuestion {
  fieldId: String
  value: String
}

type Attachment { # -> DocumentReference
  id: ID! # uuid
  _fhirID: ID # -> .id
  contentType: String # -> .content.attachment.contentType
  # base64
  data: String # -> .content.attachment.data base64
  # approved/validated/deleted
  status: String # -> .status
  originalFileName: String # -> .identifier
  systemFileName: String # -> .identifier
  type: AttachmentType # -> .type
  description: String # -> use for other document type -> .description
  subject: AttachmentSubject # -> .subject (convert this to a reference to the person resoure in FHIR)
  createdAt: Date # -> .created
}

type BirthRegResultSet {
  results: [BirthRegistration]
  totalItems: Int
}

type DeathRegResultSet {
  results: [DeathRegistration]
  totalItems: Int
}

type EventRegResultSet {
  results: [EventRegistration]
  totalItems: Int
}

type EventRegCount {
  count: Int
}

type RegistrationCount {
  declared: Int
  rejected: Int
}

type StatusWiseRegistrationCount {
  status: String!
  count: Int!
}

type RegistrationCountResult {
  results: [StatusWiseRegistrationCount]!
  total: Int!
}

type CreatedIds {
  compositionId: String
  trackingId: String
  registrationNumber: String
}

type Reinstated {
  taskEntryResourceID: ID!
  registrationStatus: RegStatus
}

type Query {
  fetchBirthRegistration(id: ID!): BirthRegistration
  searchBirthRegistrations(fromDate: Date, toDate: Date): [BirthRegistration]
  searchDeathRegistrations(fromDate: Date, toDate: Date): [DeathRegistration]
  queryRegistrationByIdentifier(identifier: ID!): BirthRegistration
  queryPersonByIdentifier(identifier: ID!): Person
  listBirthRegistrations(
    locationIds: [String]
    status: String
    userId: String
    from: Date
    to: Date
    count: Int
    skip: Int
  ): BirthRegResultSet
  fetchDeathRegistration(id: ID!): DeathRegistration
  fetchEventRegistration(id: ID!): EventRegistration
  fetchRegistration(id: ID!): EventRegistration
  fetchRegistrationForViewing(id: ID!): EventRegistration
  queryPersonByNidIdentifier(dob: String, nid: String, country: String): Person
  fetchRegistrationCountByStatus(
    status: [String]!
    locationId: String
    event: String
  ): RegistrationCountResult
}

type Mutation {
  # BIRTH
  createBirthRegistration(details: BirthRegistrationInput!): CreatedIds!
  updateBirthRegistration(id: ID!, details: BirthRegistrationInput!): ID!
  # process transitions
  markBirthAsVerified(
    id: ID!
    details: BirthRegistrationInput
  ): BirthRegistration # updates status to 'verified' + audit? - attachments are valid and in order, ready for registration - internally call update if details exists
  markBirthAsValidated(id: ID!, details: BirthRegistrationInput): ID # updates status to 'validated' - registration agent has validated the declaration
  markBirthAsRegistered(
    id: ID!
    details: BirthRegistrationInput!
  ): BirthRegistration! # updates status to 'registered' - registration clerk has accepted the declaration, it is now official - internally call update if details exists
  markBirthAsCertified(id: ID!, details: BirthRegistrationInput!): ID! # updates status to 'certified' - a printed certificate has been produced - internally call update if details exists
  requestBirthRegistrationCorrection(
    id: ID!
    details: BirthRegistrationInput!
  ): ID!
  markEventAsVoided(id: String!, reason: String!, comment: String): ID! # updated status to 'voided' - the registration was captured in error
  markEventAsReinstated(id: String!): Reinstated # updates status to 'reinstated'
  markEventAsArchived(id: String!): ID! # updates status to 'archived'
  notADuplicate(id: String!, duplicateId: String!): ID! # removes duplicates from composition
  # DEATH
  createDeathRegistration(details: DeathRegistrationInput!): CreatedIds!
  updateDeathRegistration(id: ID!, details: DeathRegistrationInput!): ID!
  # process transitions
  markDeathAsVerified(
    id: ID!
    details: DeathRegistrationInput
  ): DeathRegistration # updates status to 'verified' + audit? - attachments are valid and in order, ready for registration
  markDeathAsValidated(id: ID!, details: DeathRegistrationInput): ID # updates status to 'validated' - registration agent has validated the declaration
  markDeathAsRegistered(
    id: ID!
    details: DeathRegistrationInput!
  ): DeathRegistration! # updates status to 'registered' - registration clerk has accepted the declaration, it is now official
  markDeathAsCertified(id: ID!, details: DeathRegistrationInput!): ID! # updates status to 'certified' - a printed certificate has been produced
  requestDeathRegistrationCorrection(
    id: ID!
    details: DeathRegistrationInput!
  ): ID!
  markEventAsUnassigned(id: String!): ID! # remove assigned extension from task'
}
