type Query {
  listNotifications(
    locationIds: [String]
    status: String
    userId: String
    from: Date
    to: Date
  ): [Notification]
  fetchBirthRegistration(id: ID!): BirthRegistration
  searchBirthRegistrations(fromDate: Date, toDate: Date): [BirthRegistration]
  searchDeathRegistrations(fromDate: Date, toDate: Date): [DeathRegistration]
  queryRegistrationByIdentifier(identifier: ID!): BirthRegistration
  queryPersonByIdentifier(identifier: ID!): Person
  listBirthRegistrations(
    locationIds: [String]
    status: String
    userId: String
    from: Date
    to: Date
    count: Int
    skip: Int
  ): BirthRegResultSet
  fetchDeathRegistration(id: ID!): DeathRegistration
  fetchEventRegistration(id: ID!): EventRegistration
  fetchRegistration(id: ID!): EventRegistration
  fetchRegistrationForViewing(id: ID!): EventRegistration
  queryPersonByNidIdentifier(dob: String, nid: String, country: String): Person
  fetchRegistrationCountByStatus(
    status: [String]!
    locationId: String
    event: String
  ): RegistrationCountResult
  locationsByParent(parentId: String, type: String): [Location]
  locationById(locationId: String): Location
  hasChildLocation(parentId: String): Location
  getUser(userId: String): User
  getUserByMobile(mobile: String): User
  searchUsers(
    username: String
    mobile: String
    status: String
    role: String
    primaryOfficeId: String
    locationId: String
    count: Int
    skip: Int
    sort: String
  ): SearchUserResult
  searchFieldAgents(
    locationId: String
    primaryOfficeId: String
    status: String
    language: String
    timeStart: String!
    timeEnd: String!
    event: String
    count: Int
    skip: Int
    sort: String
  ): SearchFieldAgentResult
  verifyPasswordById(id: String!, password: String!): VerifyPasswordResult
  getTotalMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): TotalMetricsResult
  getRegistrationsListByFilter(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
    filterBy: String!
    skip: Int!
    size: Int!
  ): MixedTotalMetricsResult
  getVSExports: TotalVSExport
  getTotalPayments(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [PaymentMetric!]
  getTotalCertifications(
    timeStart: String!
    timeEnd: String!
    locationId: String
  ): [CertificationMetric!]
  getTotalCorrections(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [CorrectionMetric!]
  getLocationStatistics(
    locationId: String
    populationYear: Int!
  ): LocationStatisticsResponse
  getDeclarationsStartedMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String!
  ): DeclarationsStartedMetrics
  fetchMonthWiseEventMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [MonthWiseEstimationMetric!]
  fetchLocationWiseEventMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [LocationWiseEstimationMetric!]
  getUserAuditLog(
    practitionerId: String!
    skip: Int
    count: Int!
    timeStart: String
    timeEnd: String
  ): UserAuditLogResultSet
  searchEvents(
    userId: String
    advancedSearchParameters: AdvancedSearchParametersInput!
    count: Int
    skip: Int
    sort: String
    sortColumn: String
  ): EventSearchResultSet
  getEventsWithProgress(
    declarationJurisdictionId: String
    registrationStatuses: [String]
    compositionType: [String]
    count: Int
    skip: Int
    sort: String
  ): EventProgressResultSet
  getRoles(
    title: String
    value: ComparisonInput
    type: String
    active: Boolean
    sortBy: String
    sortOrder: String
  ): [Role]
  getCertificateSVG(status: String, event: String): CertificateSVG
  getActiveCertificatesSVG: [CertificateSVG]
  getFormDraft: [FormDraft!]
  fetchSystem(clientId: ID!): System
  getFormDataset: [FormDataset!]
  informantSMSNotifications: [SMSNotification!]
}

type Mutation {
  createNotification(details: NotificationInput!): Notification!
  voidNotification(id: ID!): Notification
  createBirthRegistration(details: BirthRegistrationInput!): CreatedIds!
  updateBirthRegistration(id: ID!, details: BirthRegistrationInput!): ID!
  markBirthAsVerified(
    id: ID!
    details: BirthRegistrationInput
  ): BirthRegistration
  markBirthAsValidated(id: ID!, details: BirthRegistrationInput): ID
  markBirthAsRegistered(
    id: ID!
    details: BirthRegistrationInput!
  ): BirthRegistration!
  markBirthAsCertified(id: ID!, details: BirthRegistrationInput!): ID!
  requestBirthRegistrationCorrection(
    id: ID!
    details: BirthRegistrationInput!
  ): ID!
  markEventAsVoided(id: String!, reason: String!, comment: String): ID!
  markEventAsReinstated(id: String!): Reinstated
  markEventAsArchived(id: String!): ID!
  notADuplicate(id: String!, duplicateId: String!): ID!
  createDeathRegistration(details: DeathRegistrationInput!): CreatedIds!
  updateDeathRegistration(id: ID!, details: DeathRegistrationInput!): ID!
  markDeathAsVerified(
    id: ID!
    details: DeathRegistrationInput
  ): DeathRegistration
  markDeathAsValidated(id: ID!, details: DeathRegistrationInput): ID
  markDeathAsRegistered(
    id: ID!
    details: DeathRegistrationInput!
  ): DeathRegistration!
  markDeathAsCertified(id: ID!, details: DeathRegistrationInput!): ID!
  requestDeathRegistrationCorrection(
    id: ID!
    details: DeathRegistrationInput!
  ): ID!
  markEventAsUnassigned(id: String!): ID!
  createOrUpdateUser(user: UserInput!): User!
  activateUser(
    userId: String!
    password: String!
    securityQNAs: [SecurityQuestionAnswer]!
  ): String
  changePassword(
    userId: String!
    existingPassword: String!
    password: String!
  ): String
  changePhone(
    userId: String!
    phoneNumber: String!
    nonce: String!
    verifyCode: String!
  ): String
  changeAvatar(userId: String!, avatar: AvatarInput!): Avatar
  auditUser(
    userId: String!
    action: String!
    reason: String!
    comment: String
  ): String
  resendSMSInvite(userId: String!): String
  usernameSMSReminder(userId: String!): String
  resetPasswordSMS(userId: String!, applicationName: String!): String
  createOrUpdateCertificateSVG(
    certificateSVG: CertificateSVGInput!
  ): CertificateSVG
  updateApplicationConfig(
    applicationConfig: ApplicationConfigurationInput
  ): ApplicationConfiguration
  createFormDraft(formDraft: FormDraftInput!): FormDraft
  modifyDraftStatus(formDraft: FormDraftStatusModifyInput!): FormDraft
  deleteFormDraft(formDraft: DeleteFormDraftInput!): String
  reactivateSystem(clientId: ID!): System
  deactivateSystem(clientId: ID!): System
  registerSystem(system: SystemInput): SystemSecret
  refreshSystemSecret(clientId: String!): SystemSecret
  updatePermissions(setting: UpdatePermissionsInput!): System
  deleteSystem(clientId: ID!): System
  bookmarkAdvancedSearch(
    bookmarkSearchInput: BookmarkSearchInput!
  ): BookMarkedSearches
  removeBookmarkedAdvancedSearch(
    removeBookmarkedSearchInput: RemoveBookmarkedSeachInput!
  ): BookMarkedSearches
  createFormDataset(formDataset: FormDatasetInput!): FormDatasetResponse
  toggleInformantSMSNotification(
    smsNotifications: [SMSNotificationInput!]
  ): [SMSNotification!]
}

type Dummy {
  dummy: String!
}

type Notification {
  id: ID!
  child: Person
  mother: Person
  father: Person
  informant: Person
  location: Location
  createdAt: Date
  updatedAt: Date
}

scalar Date

type BirthRegistration implements EventRegistration {
  id: ID!
  _fhirIDMap: Map
  registration: Registration
  child: Person
  mother: Person
  father: Person
  informant: RelatedPerson
  eventLocation: Location
  birthType: BirthType
  questionnaire: [QuestionnaireQuestion]
  weightAtBirth: Float
  attendantAtBirth: AttendantType
  otherAttendantAtBirth: String
  birthRegistrationType: BirthRegType
  childrenBornAliveToMother: Int
  foetalDeathsToMother: Int
  lastPreviousLiveBirth: Date
  createdAt: Date
  updatedAt: Date
  history: [History]
}

type DeathRegistration implements EventRegistration {
  id: ID!
  _fhirIDMap: Map
  registration: Registration
  deceased: Person
  informant: RelatedPerson
  mother: Person
  father: Person
  spouse: Person
  eventLocation: Location
  questionnaire: [QuestionnaireQuestion]
  mannerOfDeath: MannerOfDeath
  deathDescription: String
  causeOfDeathMethod: CauseOfDeathMethodType
  causeOfDeathEstablished: String
  causeOfDeath: String
  maleDependentsOfDeceased: Float
  femaleDependentsOfDeceased: Float
  medicalPractitioner: MedicalPractitioner
  createdAt: Date
  updatedAt: Date
  history: [History]
}

type Person {
  id: ID
  _fhirID: ID
  identifier: [IdentityType]
  name: [HumanName]
  telecom: [ContactPoint]
  gender: String
  birthDate: String
  age: Float
  maritalStatus: MaritalStatusType
  occupation: String
  detailsExist: Boolean
  reasonNotApplying: String
  dateOfMarriage: Date
  multipleBirth: Int
  address: [Address]
  photo: [Attachment]
  deceased: Deceased
  nationality: [String]
  educationalAttainment: EducationType
  ageOfIndividualInYears: Int
  exactDateOfBirthUnknown: Boolean
}

type BirthRegResultSet {
  results: [BirthRegistration]
  totalItems: Int
}

interface EventRegistration {
  id: ID!
  registration: Registration
  history: [History]
  createdAt: Date
}

type RegistrationCountResult {
  results: [StatusWiseRegistrationCount]!
  total: Int!
}

type Location {
  id: ID!
  _fhirID: ID
  identifier: [Identifier]
  status: String
  name: String
  alias: [String]
  description: String
  partOf: String
  type: LocationType
  telecom: [ContactPoint]
  address: Address
  longitude: Float
  latitude: Float
  altitude: Float
  geoData: String
}

type User {
  id: ID!
  userMgntUserID: ID!
  practitionerId: String!
  name: [HumanName!]!
  username: String
  mobile: String!
  role: RoleType!
  type: String
  email: String
  status: Status!
  underInvestigation: Boolean
  primaryOffice: Location
  catchmentArea: [Location]
  localRegistrar: LocalRegistrar
  identifier: Identifier
  signature: Signature
  creationDate: String!
  avatar: Avatar
  device: String
  searches: [BookmarkedSeachItem]
}

type SearchUserResult {
  results: [User]
  totalItems: Int
}

type SearchFieldAgentResult {
  results: [SearchFieldAgentResponse]
  totalItems: Int
}

type VerifyPasswordResult {
  mobile: String
  scrope: [String]
  status: String
  username: String
  id: String
}

type TotalMetricsResult {
  estimated: Estimation!
  results: [EventMetrics!]!
}

union MixedTotalMetricsResult =
    TotalMetricsByRegistrar
  | TotalMetricsByLocation
  | TotalMetricsByTime

type TotalVSExport {
  results: [VSExport!]
}

type PaymentMetric {
  total: Float!
  paymentType: String!
}

type CertificationMetric {
  total: Float!
  eventType: String!
}

type CorrectionMetric {
  total: Float!
  reason: String!
}

type LocationStatisticsResponse {
  population: Int
  registrars: Int!
  offices: Int!
}

type DeclarationsStartedMetrics {
  fieldAgentDeclarations: Int!
  hospitalDeclarations: Int!
  officeDeclarations: Int!
}

type MonthWiseEstimationMetric {
  total: Int!
  withinTarget: Int!
  within1Year: Int!
  within5Years: Int!
  estimated: Int!
  month: Int!
  year: Int!
}

type LocationWiseEstimationMetric {
  total: Int!
  withinTarget: Int!
  within1Year: Int!
  within5Years: Int!
  estimated: Int!
  locationId: String!
  locationName: String!
}

type UserAuditLogResultSet {
  total: Int!
  results: [UserAuditLogResultItem!]!
}

type EventSearchResultSet {
  results: [EventSearchSet]
  totalItems: Int
}

input AdvancedSearchParametersInput {
  event: Event
  name: String
  registrationStatuses: [String]
  dateOfEvent: String
  dateOfEventStart: String
  dateOfEventEnd: String
  contactNumber: String
  nationalId: String
  registrationNumber: String
  trackingId: String
  dateOfRegistration: String
  dateOfRegistrationStart: String
  dateOfRegistrationEnd: String
  declarationLocationId: String
  declarationJurisdictionId: String
  eventLocationId: String
  eventCountry: String
  eventLocationLevel1: String
  eventLocationLevel2: String
  eventLocationLevel3: String
  eventLocationLevel4: String
  eventLocationLevel5: String
  childFirstNames: String
  childLastName: String
  childDoB: String
  childDoBStart: String
  childDoBEnd: String
  childGender: String
  deceasedFirstNames: String
  deceasedFamilyName: String
  deceasedGender: String
  deceasedDoB: String
  deceasedDoBStart: String
  deceasedDoBEnd: String
  deceasedIdentifier: String
  motherFirstNames: String
  motherFamilyName: String
  motherDoB: String
  motherDoBStart: String
  motherDoBEnd: String
  motherIdentifier: String
  fatherFirstNames: String
  fatherFamilyName: String
  fatherDoB: String
  fatherDoBStart: String
  fatherDoBEnd: String
  fatherIdentifier: String
  informantFirstNames: String
  informantFamilyName: String
  informantDoB: String
  informantDoBStart: String
  informantDoBEnd: String
  informantIdentifier: String
  compositionType: [String]
}

type EventProgressResultSet {
  results: [EventProgressSet]
  totalItems: Int
}

type Role {
  id: ID!
  title: String
  value: String
  types: [String]
  active: Boolean
}

input ComparisonInput {
  eq: String
  gt: String
  lt: String
  gte: String
  lte: String
  in: [String!]
  ne: String
  nin: [String!]
}

type CertificateSVG {
  id: ID!
  svgCode: String!
  svgFilename: String!
  svgDateUpdated: String!
  svgDateCreated: String!
  user: String!
  event: String!
  status: String!
}

type FormDraft {
  _id: ID!
  event: Event!
  status: DraftStatus!
  comment: String!
  version: Int!
  history: [DraftHistory!]!
  updatedAt: Date!
  createdAt: Date!
}

type System {
  _id: ID!
  clientId: ID!
  shaSecret: ID!
  status: SystemStatus!
  name: String!
  type: SystemType!
  settings: [WebhookPermission!]
}

type FormDataset {
  options: [FormDatasetOption!]
  fileName: String!
  createdAt: String!
  _id: String
}

type SMSNotification {
  id: String
  name: String!
  message: String!
  enabled: Boolean!
  updatedAt: String!
  createdAt: String!
}

input NotificationInput {
  child: PersonInput
  mother: PersonInput
  father: PersonInput
  informant: PersonInput
  location: LocationInput
  createdAt: Date
  updatedAt: Date
}

type CreatedIds {
  compositionId: String
  trackingId: String
  registrationNumber: String
}

input BirthRegistrationInput {
  _fhirIDMap: Map
  registration: RegistrationInput
  child: PersonInput
  mother: PersonInput
  father: PersonInput
  informant: RelatedPersonInput
  eventLocation: LocationInput
  birthType: BirthType
  questionnaire: [QuestionnaireQuestionInput]
  weightAtBirth: Float
  attendantAtBirth: AttendantType
  otherAttendantAtBirth: String
  birthRegistrationType: BirthRegType
  childrenBornAliveToMother: Int
  foetalDeathsToMother: Int
  lastPreviousLiveBirth: Date
  createdAt: Date
  updatedAt: Date
}

type Reinstated {
  taskEntryResourceID: ID!
  registrationStatus: RegStatus
}

input DeathRegistrationInput {
  _fhirIDMap: Map
  registration: RegistrationInput
  deceased: PersonInput
  informant: RelatedPersonInput
  mother: PersonInput
  father: PersonInput
  spouse: PersonInput
  eventLocation: LocationInput
  questionnaire: [QuestionnaireQuestionInput]
  mannerOfDeath: MannerOfDeath
  deathDescription: String
  causeOfDeathMethod: CauseOfDeathMethodType
  causeOfDeathEstablished: String
  causeOfDeath: String
  maleDependentsOfDeceased: Float
  femaleDependentsOfDeceased: Float
  medicalPractitioner: MedicalPractitionerInput
  createdAt: Date
  updatedAt: Date
}

input UserInput {
  id: ID
  name: [HumanNameInput!]!
  identifier: [UserIdentifierInput]
  username: String
  mobile: String!
  role: RoleType!
  type: String
  email: String
  primaryOffice: String
  catchmentArea: [String]
  device: String
  signature: SignatureInput
}

input SecurityQuestionAnswer {
  questionKey: String
  answer: String
}

type Avatar {
  type: String!
  data: String!
}

input AvatarInput {
  type: String!
  data: String!
}

input CertificateSVGInput {
  id: ID!
  svgCode: String!
  svgFilename: String!
  svgDateUpdated: Int
  svgDateCreated: Int
  user: String!
  event: String!
  status: String!
}

type ApplicationConfiguration {
  APPLICATION_NAME: String
  BIRTH: Birth
  COUNTRY_LOGO: CountryLogo
  CURRENCY: Currency
  DEATH: Death
  FIELD_AGENT_AUDIT_LOCATIONS: String
  HIDE_EVENT_REGISTER_INFORMATION: Boolean
  EXTERNAL_VALIDATION_WORKQUEUE: Boolean
  PHONE_NUMBER_PATTERN: String
  NID_NUMBER_PATTERN: String
  ADDRESSES: Int
  INFORMANT_SIGNATURE: Boolean
  INFORMANT_SIGNATURE_REQUIRED: Boolean
  DATE_OF_BIRTH_UNKNOWN: Boolean
  ADMIN_LEVELS: Int
  LOGIN_BACKGROUND: LoginBackground
}

input ApplicationConfigurationInput {
  APPLICATION_NAME: String
  BIRTH: BirthInput
  COUNTRY_LOGO: CountryLogoInput
  CURRENCY: CurrencyInput
  DEATH: DeathInput
  FIELD_AGENT_AUDIT_LOCATIONS: String
  HIDE_EVENT_REGISTER_INFORMATION: Boolean
  EXTERNAL_VALIDATION_WORKQUEUE: Boolean
  PHONE_NUMBER_PATTERN: String
  NID_NUMBER_PATTERN: String
  ADDRESSES: Int
  INFORMANT_SIGNATURE: Boolean
  INFORMANT_SIGNATURE_REQUIRED: Boolean
  DATE_OF_BIRTH_UNKNOWN: Boolean
  ADMIN_LEVELS: Int
  LOGIN_BACKGROUND: LoginBackgroundInput
}

input FormDraftInput {
  questions: [QuestionInput!]!
  event: Event!
  comment: String!
}

input FormDraftStatusModifyInput {
  event: Event!
  status: DraftStatus!
}

input DeleteFormDraftInput {
  event: Event!
}

type SystemSecret {
  system: System!
  clientSecret: ID!
}

input SystemInput {
  name: String!
  type: SystemType!
  settings: SystemSettings
}

input UpdatePermissionsInput {
  clientId: String!
  webhook: [WebhookInput!]!
}

type BookMarkedSearches {
  searchList: [BookmarkedSeachItem!]
}

input BookmarkSearchInput {
  userId: String!
  name: String!
  parameters: AdvancedSearchParametersInput!
}

input RemoveBookmarkedSeachInput {
  userId: String!
  searchId: String!
}

type FormDatasetResponse {
  status: String!
  msg: String!
  data: FormDataset
}

input FormDatasetInput {
  fileName: String!
  base64Data: String!
}

input SMSNotificationInput {
  id: String!
  name: String!
  enabled: Boolean!
}

scalar Map

type Registration {
  id: ID
  _fhirID: ID
  draftId: String
  trackingId: String
  mosipAid: String
  registrationNumber: String
  paperFormID: String
  page: String
  book: String
  informantType: InformantType
  otherInformantType: String
  assignment: AssignmentData
  contact: String
  contactRelationship: String
  informantsSignature: String
  contactPhoneNumber: String
  status: [RegWorkflow]
  type: RegistrationType
  inCompleteFields: String
  attachments: [Attachment]
  certificates: [Certificate]
  duplicates: [ID]
}

type RelatedPerson {
  id: ID
  _fhirID: ID
  relationship: String
  otherRelationship: String
  affidavit: [Attachment]
  individual: Person
  exactDateOfBirthUnknown: Boolean
  ageOfIndividualInYears: Int
}

enum BirthType {
  SINGLE
  TWIN
  TRIPLET
  QUADRUPLET
  HIGHER_MULTIPLE_DELIVERY
}

type QuestionnaireQuestion {
  fieldId: String
  value: String
}

enum AttendantType {
  PHYSICIAN
  NURSE
  NURSE_MIDWIFE
  MIDWIFE
  TRADITIONAL_BIRTH_ATTENDANT
  OTHER_PARAMEDICAL_PERSONNEL
  LAYPERSON
  NONE
  OTHER
}

enum BirthRegType {
  BOTH_PARENTS
  SELF
  INFORMANT_ONLY
  MOTHER_ONLY
  FATHER_ONLY
}

type History {
  user: User
  date: Date
  regStatus: RegStatus
  action: RegAction
  statusReason: StatusReason
  reason: String
  requester: String
  hasShowedVerifiedDocument: Boolean
  otherReason: String
  system: System
  location: Location
  office: Location
  dhis2Notification: Boolean
  comments: [Comment]
  input: [InputOutput]
  output: [InputOutput]
  certificates: [Certificate]
  signature: Signature
}

enum MannerOfDeath {
  NATURAL_CAUSES
  ACCIDENT
  SUICIDE
  HOMICIDE
  MANNER_UNDETERMINED
}

enum CauseOfDeathMethodType {
  PHYSICIAN
  LAY_REPORTED
  VERBAL_AUTOPSY
  MEDICALLY_CERTIFIED
}

type MedicalPractitioner {
  name: String
  qualification: String
  lastVisitDate: Date
}

type IdentityType {
  id: ID
  type: IdentityIDType
  otherType: String
}

type HumanName {
  use: String
  firstNames: String
  familyName: String
}

type ContactPoint {
  system: String
  value: String
  use: String
}

enum MaritalStatusType {
  SINGLE
  MARRIED
  WIDOWED
  DIVORCED
  NOT_STATED
  SEPARATED
}

type Address {
  use: String
  type: AddressType
  text: String
  line: [String]
  lineName: [String]
  city: String
  district: String
  districtName: String
  state: String
  stateName: String
  postalCode: String
  country: String
  from: Date
  to: Date
}

type Attachment {
  id: ID!
  _fhirID: ID
  contentType: String
  data: String
  status: String
  originalFileName: String
  systemFileName: String
  type: AttachmentType
  description: String
  subject: AttachmentSubject
  createdAt: Date
}

type Deceased {
  deceased: Boolean
  deathDate: String
}

enum EducationType {
  NO_SCHOOLING
  PRIMARY_ISCED_1
  LOWER_SECONDARY_ISCED_2
  UPPER_SECONDARY_ISCED_3
  POST_SECONDARY_ISCED_4
  FIRST_STAGE_TERTIARY_ISCED_5
  SECOND_STAGE_TERTIARY_ISCED_6
  NOT_STATED
}

type StatusWiseRegistrationCount {
  status: String!
  count: Int!
}

type Identifier {
  system: String
  value: String
}

enum LocationType {
  HEALTH_FACILITY
  HOSPITAL
  OTHER_HEALTH_INSTITUTION
  ADMIN_STRUCTURE
  CRVS_OFFICE
  PRIVATE_HOME
  DECEASED_USUAL_RESIDENCE
  SECONDARY_ADDRESS
  PRIMARY_ADDRESS
  MILITARY_BASE_OR_CANTONMENT
  IDP_CAMP
  UNHCR_CAMP
  OTHER
}

enum RoleType {
  FIELD_AGENT
  REGISTRATION_AGENT
  LOCAL_REGISTRAR
  LOCAL_SYSTEM_ADMIN
  NATIONAL_SYSTEM_ADMIN
  PERFORMANCE_MANAGEMENT
  NATIONAL_REGISTRAR
}

enum Status {
  active
  deactivated
  pending
  disabled
}

type LocalRegistrar {
  name: [HumanName]!
  role: RoleType!
  signature: Signature
}

type Signature {
  data: String
  type: String
}

type BookmarkedSeachItem {
  searchId: String!
  name: String!
  parameters: AdvancedSeachParameters!
}

type SearchFieldAgentResponse {
  practitionerId: String
  fullName: String
  type: String
  status: Status
  avatar: Avatar
  primaryOfficeId: String
  creationDate: String
  totalNumberOfDeclarationStarted: Int
  totalNumberOfInProgressAppStarted: Int
  totalNumberOfRejectedDeclarations: Int
  averageTimeForDeclaredDeclarations: Int
}

type Estimation {
  totalEstimation: Int!
  maleEstimation: Int!
  femaleEstimation: Int!
  locationId: String!
  estimationYear: Int!
  locationLevel: String!
}

type EventMetrics {
  total: Int!
  gender: String!
  eventLocationType: String!
  timeLabel: String!
  practitionerRole: String!
}

type TotalMetricsByRegistrar {
  results: [EventMetricsByRegistrar!]!
  total: Int
}

type TotalMetricsByLocation {
  results: [EventMetricsByLocation!]!
  total: Int
}

type TotalMetricsByTime {
  results: [EventMetricsByTime!]!
  total: Int
}

type VSExport {
  event: String!
  startDate: Date!
  endDate: Date!
  fileSize: String!
  url: String!
  createdOn: Date!
}

union UserAuditLogResultItem =
    UserAuditLogItemWithComposition
  | UserAuditLogItem

interface EventSearchSet {
  id: ID!
  type: String
  registration: RegistrationSearchSet
  operationHistories: [OperationHistorySearchSet]
}

enum Event {
  birth
  death
}

type EventProgressSet {
  id: ID!
  type: String
  name: [HumanName]
  dateOfEvent: Date
  registration: RegistrationSearchSet
  startedBy: User
  startedByFacility: String
  startedAt: Date
  progressReport: EventProgressData
}

enum DraftStatus {
  DRAFT
  IN_PREVIEW
  PUBLISHED
}

type DraftHistory {
  _id: ID!
  version: Int!
  status: DraftStatus!
  comment: String!
  updatedAt: Date!
}

enum SystemStatus {
  active
  deactivated
}

enum SystemType {
  NATIONAL_ID
  HEALTH
  RECORD_SEARCH
  WEBHOOK
}

type WebhookPermission {
  event: String!
  permissions: [String!]!
}

type FormDatasetOption {
  value: String!
  label: [FormDatasetOptionLabel]
}

input PersonInput {
  _fhirID: ID
  identifier: [IdentityInput]
  name: [HumanNameInput]
  telecom: [ContactPointInput]
  gender: String
  birthDate: String
  age: Float
  maritalStatus: MaritalStatusType
  occupation: String
  detailsExist: Boolean
  reasonNotApplying: String
  dateOfMarriage: Date
  multipleBirth: Int
  address: [AddressInput]
  photo: [AttachmentInput!]
  deceased: DeceasedInput
  nationality: [String]
  educationalAttainment: EducationType
  ageOfIndividualInYears: Int
}

input LocationInput {
  _fhirID: ID
  identifier: [ID]
  status: String
  name: String
  alias: [String]
  description: String
  partOf: String
  type: LocationType
  telecom: [ContactPointInput]
  address: AddressInput
  longitude: Float
  latitude: Float
  altitude: Float
  geoData: String
}

input RegistrationInput {
  _fhirID: ID
  draftId: String
  trackingId: String
  mosipAid: String
  registrationNumber: String
  paperFormID: String
  page: String
  book: String
  informantsSignature: String
  informantType: InformantType
  otherInformantType: String
  contact: String
  contactRelationship: String
  contactPhoneNumber: String
  status: [RegWorkflowInput]
  type: RegistrationType
  inCompleteFields: String
  attachments: [AttachmentInput!]
  certificates: [CertificateInput]
  location: LocationInput
  correction: CorrectionInput
}

input RelatedPersonInput {
  id: ID
  _fhirID: ID
  relationship: String
  otherRelationship: String
  affidavit: [AttachmentInput!]
  individual: PersonInput
  exactDateOfBirthUnknown: Boolean
  ageOfIndividualInYears: Int
}

input QuestionnaireQuestionInput {
  fieldId: String
  value: String
}

enum RegStatus {
  IN_PROGRESS
  ARCHIVED
  DECLARED
  DECLARATION_UPDATED
  WAITING_VALIDATION
  VALIDATED
  REGISTERED
  CERTIFIED
  REJECTED
}

input MedicalPractitionerInput {
  name: String
  qualification: String
  lastVisitDate: Date
}

input HumanNameInput {
  use: String
  firstNames: String
  familyName: String
}

input UserIdentifierInput {
  use: String
  system: String
  value: String
}

input SignatureInput {
  data: String!
  type: String
}

type Birth {
  REGISTRATION_TARGET: Int
  LATE_REGISTRATION_TARGET: Int
  FEE: BirthFee
}

type CountryLogo {
  fileName: String
  file: String
}

type Currency {
  isoCode: String
  languagesAndCountry: [String]
}

type Death {
  REGISTRATION_TARGET: Int
  FEE: DeathFee
}

type LoginBackground {
  backgroundColor: String
  backgroundImage: String
  imageFit: ImageFit
}

input BirthInput {
  REGISTRATION_TARGET: Int
  LATE_REGISTRATION_TARGET: Int
  FEE: BirthFeeInput
}

input CountryLogoInput {
  fileName: String
  file: String
}

input CurrencyInput {
  isoCode: String
  languagesAndCountry: [String]
}

input DeathInput {
  REGISTRATION_TARGET: Int
  FEE: DeathFeeInput
}

input LoginBackgroundInput {
  backgroundColor: String
  backgroundImage: String
  imageFit: ImageFit
}

input QuestionInput {
  fieldId: String!
  label: [MesssageInput!]
  placeholder: [MesssageInput!]
  description: [MesssageInput!]
  tooltip: [MesssageInput!]
  errorMessage: [MesssageInput!]
  maxLength: Int
  fieldName: String
  fieldType: CustomFieldType
  precedingFieldId: String!
  required: Boolean
  enabled: String
  custom: Boolean
  conditionals: [ConditionalInput!]
  datasetId: String
  options: [CustomSelectOption!]
}

input SystemSettings {
  dailyQuota: Int
  webhook: [WebhookInput]
}

input WebhookInput {
  event: String!
  permissions: [String]!
}

enum InformantType {
  INFORMANT
  MOTHER
  FATHER
  GRANDFATHER
  GRANDMOTHER
  BROTHER
  SISTER
  OTHER_FAMILY_MEMBER
  LEGAL_GUARDIAN
  SPOUSE
  SON
  DAUGHTER
  SON_IN_LAW
  DAUGHTER_IN_LAW
  GRANDSON
  GRANDDAUGHTER
  OTHER
}

type AssignmentData {
  userId: String
  firstName: String
  lastName: String
  officeName: String
}

type RegWorkflow {
  id: ID!
  type: RegStatus
  user: User
  timestamp: Date
  comments: [Comment]
  reason: String
  location: Location
  office: Location
  timeLogged: Int
}

enum RegistrationType {
  BIRTH
  DEATH
}

type Certificate {
  collector: RelatedPerson
  hasShowedVerifiedDocument: Boolean
  payments: [Payment]
  data: String
}

enum RegAction {
  ASSIGNED
  UNASSIGNED
  REINSTATED
  REQUESTED_CORRECTION
  DOWNLOADED
  VIEWED
}

type StatusReason {
  text: String
}

type Comment {
  id: ID!
  user: User
  comment: String
  createdAt: Date
}

type InputOutput {
  valueCode: String
  valueId: String
  valueString: String
}

enum IdentityIDType {
  PASSPORT
  NATIONAL_ID
  MOSIP_UINTOKEN
  DECEASED_PATIENT_ENTRY
  BIRTH_PATIENT_ENTRY
  DRIVING_LICENSE
  BIRTH_REGISTRATION_NUMBER
  DEATH_REGISTRATION_NUMBER
  REFUGEE_NUMBER
  ALIEN_NUMBER
  OTHER
  NO_ID
  SOCIAL_SECURITY_NO
}

enum AddressType {
  HEALTH_FACILITY
  ADMIN_STRUCTURE
  CRVS_OFFICE
  PRIVATE_HOME
  DECEASED_USUAL_RESIDENCE
  SECONDARY_ADDRESS
  PRIMARY_ADDRESS
  MILITARY_BASE_OR_CANTONMENT
  IDP_CAMP
  UNHCR_CAMP
  OTHER
}

enum AttachmentType {
  BIRTH_CERTIFICATE
  NATIONAL_ID
  PASSPORT
  NOTIFICATION_OF_BIRTH
  PROOF_OF_LEGAL_GUARDIANSHIP
  PROOF_OF_ASSIGNED_RESPONSIBILITY
  HOSPITAL_CERTIFICATE_OF_DEATH
  ATTESTED_LETTER_OF_DEATH
  BURIAL_RECEIPT
  POLICE_CERTIFICATE_OF_DEATH
  MEDICALLY_CERTIFIED_CAUSE_OF_DEATH
  VERBAL_AUTOPSY_REPORT
  CORONERS_REPORT
  OTHER
}

enum AttachmentSubject {
  MOTHER
  FATHER
  CHILD
  OTHER
  PARENT
  CHILD_AGE
  DECEASED_ID_PROOF
  DECEASED_DEATH_PROOF
  DECEASED_DEATH_CAUSE_PROOF
  INFORMANT_ID_PROOF
  LEGAL_GUARDIAN_PROOF
}

type AdvancedSeachParameters {
  event: Event
  name: String
  registrationStatuses: [String]
  dateOfEvent: String
  dateOfEventStart: String
  dateOfEventEnd: String
  contactNumber: String
  nationalId: String
  registrationNumber: String
  trackingId: String
  dateOfRegistration: String
  dateOfRegistrationStart: String
  dateOfRegistrationEnd: String
  declarationLocationId: String
  declarationJurisdictionId: String
  eventLocationId: String
  eventCountry: String
  eventLocationLevel1: String
  eventLocationLevel2: String
  eventLocationLevel3: String
  eventLocationLevel4: String
  eventLocationLevel5: String
  childFirstNames: String
  childLastName: String
  childDoB: String
  childDoBStart: String
  childDoBEnd: String
  childGender: String
  deceasedFirstNames: String
  deceasedFamilyName: String
  deceasedGender: String
  deceasedDoB: String
  deceasedDoBStart: String
  deceasedDoBEnd: String
  deceasedIdentifier: String
  motherFirstNames: String
  motherFamilyName: String
  motherDoB: String
  motherDoBStart: String
  motherDoBEnd: String
  motherIdentifier: String
  fatherFirstNames: String
  fatherFamilyName: String
  fatherDoB: String
  fatherDoBStart: String
  fatherDoBEnd: String
  fatherIdentifier: String
  informantFirstNames: String
  informantFamilyName: String
  informantDoB: String
  informantDoBStart: String
  informantDoBEnd: String
  informantIdentifier: String
  compositionType: [String]
}

type EventMetricsByRegistrar {
  registrarPractitioner: User
  total: Int!
  late: Int!
  delayed: Int!
}

type EventMetricsByLocation {
  location: Location!
  total: Int!
  late: Int!
  delayed: Int!
  home: Int!
  healthFacility: Int!
}

type EventMetricsByTime {
  total: Int!
  late: Int!
  delayed: Int!
  home: Int!
  healthFacility: Int!
  month: String!
  time: String!
}

type UserAuditLogItemWithComposition implements AuditLogItemBase {
  time: String!
  ipAddress: String!
  userAgent: String!
  action: String!
  practitionerId: String!
  data: AdditionalIdWithCompositionId!
}

type UserAuditLogItem implements AuditLogItemBase {
  time: String!
  ipAddress: String!
  userAgent: String!
  action: String!
  practitionerId: String!
}

type RegistrationSearchSet {
  status: String
  contactNumber: String
  contactRelationship: String
  dateOfDeclaration: Date
  trackingId: String
  registrationNumber: String
  eventLocationId: String
  registeredLocationId: String
  reason: String
  comment: String
  duplicates: [ID]
  createdAt: String
  modifiedAt: String
  assignment: AssignmentData
}

type OperationHistorySearchSet {
  operationType: String
  operatedOn: Date
  operatorRole: String
  operatorName: [HumanName]
  operatorOfficeName: String
  operatorOfficeAlias: [String]
  notificationFacilityName: String
  notificationFacilityAlias: [String]
  rejectReason: String
  rejectComment: String
}

type BirthEventSearchSet implements EventSearchSet {
  id: ID!
  type: String
  childName: [HumanName]
  dateOfBirth: Date
  registration: RegistrationSearchSet
  operationHistories: [OperationHistorySearchSet]
}

type DeathEventSearchSet implements EventSearchSet {
  id: ID!
  type: String
  deceasedName: [HumanName]
  dateOfDeath: Date
  registration: RegistrationSearchSet
  operationHistories: [OperationHistorySearchSet]
}

type EventProgressData {
  timeInProgress: Int
  timeInReadyForReview: Int
  timeInRequiresUpdates: Int
  timeInWaitingForApproval: Int
  timeInWaitingForBRIS: Int
  timeInReadyToPrint: Int
}

type FormDatasetOptionLabel {
  lang: String!
  descriptor: MesssageDescriptor!
}

input IdentityInput {
  id: ID
  type: IdentityIDType
  otherType: String
}

input ContactPointInput {
  system: String
  value: String
  use: String
}

input AddressInput {
  use: String
  type: AddressType
  text: String
  line: [String]
  city: String
  district: String
  state: String
  postalCode: String
  country: String
  from: Date
  to: Date
}

input AttachmentInput {
  _fhirID: ID
  contentType: String
  data: String!
  status: String
  originalFileName: String
  systemFileName: String
  type: AttachmentType
  description: String
  subject: AttachmentSubject
  createdAt: Date
}

input DeceasedInput {
  deceased: Boolean
  deathDate: String
}

input RegWorkflowInput {
  type: RegStatus
  user: UserInput
  timestamp: Date
  reason: String
  comments: [CommentInput]
  location: LocationInput
  timeLoggedMS: Int
}

input CertificateInput {
  collector: RelatedPersonInput
  hasShowedVerifiedDocument: Boolean
  payments: [PaymentInput]
  data: String
}

input CorrectionInput {
  requester: ID
  hasShowedVerifiedDocument: Boolean
  attestedAndCopied: Boolean
  noSupportingDocumentationRequired: Boolean
  payments: [PaymentInput]
  values: [CorrectionValueInput]
  location: LocationInput
  data: String
  reason: String
  otherReason: String
  note: String
}

type BirthFee {
  ON_TIME: Float
  LATE: Float
  DELAYED: Float
}

type DeathFee {
  ON_TIME: Float
  DELAYED: Float
}

enum ImageFit {
  FILL
  TILE
}

input BirthFeeInput {
  ON_TIME: Float
  LATE: Float
  DELAYED: Float
}

input DeathFeeInput {
  ON_TIME: Float
  DELAYED: Float
}

input MesssageInput {
  lang: String!
  descriptor: MesssageDescriptorInput!
}

enum CustomFieldType {
  TEXT
  TEL
  TEXTAREA
  NUMBER
  SUBSECTION
  PARAGRAPH
  SELECT_WITH_OPTIONS
}

input ConditionalInput {
  fieldId: String!
  regexp: String!
}

input CustomSelectOption {
  value: String!
  label: MesssageDescriptorInput!
}

type Payment {
  paymentId: ID
  type: PaymentType
  total: Float
  amount: Float
  outcome: PaymentOutcomeType
  date: Date
}

interface AuditLogItemBase {
  time: String!
  ipAddress: String!
  userAgent: String!
  action: String!
  practitionerId: String!
}

type AdditionalIdWithCompositionId {
  compositionId: String!
  trackingId: String!
}

type MesssageDescriptor {
  id: String!
  description: String
  defaultMessage: String!
}

input CommentInput {
  user: UserInput
  comment: String
  createdAt: Date
}

input PaymentInput {
  paymentId: ID
  type: PaymentType
  total: Float
  amount: Float
  outcome: PaymentOutcomeType
  date: Date
  data: String
}

input CorrectionValueInput {
  section: String
  fieldName: String
  oldValue: String
  newValue: String
}

input MesssageDescriptorInput {
  id: String!
  description: String
  defaultMessage: String!
}

enum PaymentType {
  MANUAL
}

enum PaymentOutcomeType {
  COMPLETED
  ERROR
  PARTIAL
}
